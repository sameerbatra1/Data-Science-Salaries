#load packages
library(dplyr)
library(ggplot2)
#load data
salaries = read.csv("data_science_salaries.csv")
#load packages
library(dplyr)
library(ggplot2)
#load data
salaries = read.csv("data_science_salaries.csv")
#check for missing values
total_na <- sum(is.na(salaries))
missing_summary <- colSums(is.na(salaries))
cat("Total missing values:", total_na, "\n")
print(missing_summary)
# Display first few rows
head(salaries)
str(salaries)
summary(salaries)
# Create the grouped dataframe
country_counts <- as.data.frame(table(salaries$employee_residence))
colnames(country_counts) <- c("Country", "Frequency")
# Arrange by Frequency in ascending order
country_counts <- country_counts[order(country_counts$Frequency, decreasing = TRUE), ]
# View the result
country_counts
# Create the barplot
ggplot(country_counts, aes(x = reorder(Country, -Frequency), y = Frequency)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Frequency of Employee Residence by Country",
x = "Country",
y = "Frequency") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
us_residents_df <- subset(salaries, employee_residence == "United States")
#Since we are only working with us_residents dataframe we need to delete salary, salary_currency
us_residents_df <- subset(us_residents_df, select= -c(employee_residence, salary, salary_currency))
us_residents_df
# Function to find outliers using IQR and return entire rows
find_outliers <- function(data, column_name) {
column <- data[[column_name]]
Q1 <- quantile(column, 0.25, na.rm = TRUE)
Q3 <- quantile(column, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
# Define lower and upper bounds
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
# Identify outliers (rows where the value is outside the bounds)
outliers <- data[column < lower_bound | column > upper_bound, ]
return(outliers)
}
# Apply function to salary and salary_in_usd
outliers_salary_usd <- find_outliers(us_residents_df, "salary_in_usd")
outliers_salary_usd
# Display the outliers
#list(Salary_Outliers = outliers_salary, Salary_USD_Outliers = outliers_salary_usd)
# Boxplot for Salary in USD
ggplot(us_residents_df, aes(y = salary_in_usd)) +
geom_boxplot(fill = "lightblue", outlier.color = "red") +
labs(title = "Boxplot of Salary in USD", y = "Salary in USD")
outliers_salary_usd
ggplot(cleaned_salaries, aes(y = salary_in_usd)) +
geom_boxplot(fill = "lightblue", outlier.color = "red") +
labs(title = "Boxplot of Salary in usd", y = "Salary")
ggplot(cleaned_salaries, aes(y = salary_in_usd)) +
geom_boxplot(fill = "lightblue", outlier.color = "red") +
labs(title = "Boxplot of Salary in usd", y = "Salary")
# Get the indices of the rows with outliers in salary and salary_in_usd
outlier_rows_salary_usd <- which(us_residents_df$salary_in_usd %in% outliers_salary_usd$salary_in_usd)
# Remove outliers from the original dataset using subset
cleaned_salaries <- us_residents_df[-outlier_rows_salary_usd, ]
cleaned_salaries
ggplot(cleaned_salaries, aes(y = salary_in_usd)) +
geom_boxplot(fill = "lightblue", outlier.color = "red") +
labs(title = "Boxplot of Salary in usd", y = "Salary")
# Count occurrences of each job_title
#job_title_counts <- table(cleaned_salaries$job_title)
#job_title_counts
# Find job titles that occur more than or equal to 10 times
#valid_job_titles <- names(job_title_counts[job_title_counts >= 10])
# Filter the dataframe to only include these job titles
#filtered_salaries <- subset(cleaned_salaries, job_title %in% valid_job_titles)
# Display the filtered dataframe
#subset(filtered_salaries$job_title == "Other")
library(ezids)
# Outlier Removal + Visualization
us_residents_clean <- ezids::outlierKD2(us_residents_df, salary_in_usd, rm = TRUE, boxplt = TRUE, qqplt = TRUE)
# Check normality after removing outliers
qqnorm(us_residents_clean$salary_in_usd, main = "QQ-Plot for Salary After Outlier Removal", col = "blue")
qqline(us_residents_clean$salary_in_usd, col = "red")
#Check experience_level value
unique(cleaned_salaries$experience_level)
# Compute average salary and salary in USD by experience level
experience_salary <- cleaned_salaries %>%
group_by(experience_level) %>%
summarise(
Avg_Salary_USD = mean(salary_in_usd, na.rm = TRUE),
Count = n()
)
# Display summary table
print(experience_salary)
library(scales)
# Visualize with Barplot
ggplot(cleaned_salaries, aes(x = experience_level, y = salary_in_usd, fill = experience_level)) +
geom_bar(stat = "identity") +
labs(title = "Average Salary by Experience Level", x = "Experience Level", y = "Average Salary (USD)")+
scale_y_continuous(labels = scales::comma)+
theme_minimal()
# Visualize with Boxplot
ggplot(cleaned_salaries, aes(x = experience_level, y = salary_in_usd, fill = experience_level)) +
geom_boxplot() +
labs(title = "Salary Distribution by Experience Level", x = "Experience Level", y = "Salary in USD") +
scale_y_continuous(labels = scales::comma)+
theme_minimal()
# ANOVA test
anova_result <- aov(salary_in_usd ~ experience_level, data = cleaned_salaries)
summary(anova_result)
#Check work_models value
unique(cleaned_salaries$work_models)
# Compute average salary by work model
work_model_salary <- cleaned_salaries %>%
group_by(work_models) %>%
summarise(
Avg_Salary_USD = mean(salary_in_usd, na.rm = TRUE),
Count = n()
)
print(work_model_salary)
# Boxplot of Salary by Work Model
ggplot(cleaned_salaries, aes(x = work_models, y = salary_in_usd, fill = work_models)) +
geom_boxplot() +
scale_y_continuous(labels = scales::comma) +
labs(title = "Salary Comparison: Remote vs. In-Person", x = "Work Model", y = "Salary in USD")+
theme_minimal()
# ANOVA test
anova_result <- aov(salary_in_usd ~ work_models, data = cleaned_salaries)
summary(anova_result)
#Check company_size value
unique(cleaned_salaries$company_size)
salary_summary <- cleaned_salaries %>%
group_by(company_size) %>%
summarise(
mean_salary = mean(salary_in_usd, na.rm = TRUE),
median_salary = median(salary_in_usd, na.rm = TRUE),
count = n()
)
print(salary_summary)
#Box plot for Salary distribution by company size
ggplot(cleaned_salaries, aes(x = company_size, y = salary_in_usd, fill = company_size)) +
geom_boxplot() +
labs(title = "Salary Distribution by Company Size", x = "Company Size", y = "Salary (USD)") +
scale_y_continuous(labels = comma)
theme_minimal()
# ANOVA test
anova_result <- aov(salary_in_usd ~ company_size, data = cleaned_salaries)
summary(anova_result)
#Check work_year value
unique(cleaned_salaries$work_year)
# Compute average salary by year
salary_trends <- cleaned_salaries %>%
group_by(work_year) %>%
summarise(
Avg_Salary_USD = mean(salary_in_usd, na.rm = TRUE),
Count = n()
)
print(salary_trends)
# Line plot for Salary Trends
ggplot(salary_trends, aes(x = work_year, y = Avg_Salary_USD)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "red", size = 2) +
scale_y_continuous(labels = scales::comma) +
labs(title = "Salary Trends in Data Science (2020-2024)", x = "Year", y = "Average Salary in USD") +
theme_minimal()
# Box plot
ggplot(cleaned_salaries, aes(x = as.factor(work_year), y = salary_in_usd, fill = as.factor(work_year))) +
geom_boxplot() +
scale_y_continuous(labels = scales::comma) +
labs(title = "Salary Distribution by Year",x = "Year",y = "Salary in USD") +
theme_minimal()
# ANOVA test
anova_result <- aov(salary_in_usd ~ as.factor(work_year), data = cleaned_salaries)
summary(anova_result)
#Check company_size value
unique(cleaned_salaries$company_size)
salary_summary <- cleaned_salaries %>%
group_by(company_size) %>%
summarise(
mean_salary = mean(salary_in_usd, na.rm = TRUE),
median_salary = median(salary_in_usd, na.rm = TRUE),
count = n()
)
print(salary_summary)
#Box plot for Salary distribution by company size
ggplot(cleaned_salaries, aes(x = company_size, y = salary_in_usd, fill = company_size)) +
geom_boxplot() +
labs(title = "Salary Distribution by Company Size", x = "Company Size", y = "Salary (USD)") +
scale_y_continuous(labels = comma)
theme_minimal()
# ANOVA test
anova_result <- aov(salary_in_usd ~ company_size, data = cleaned_salaries)
summary(anova_result)
salaries_2024 <- cleaned_salaries %>%
filter(work_year == 2024)
# average salaries by job title
top_job <- salaries_2024 %>%
group_by(job_title) %>%
summarise(
mean_salary = mean(salary_in_usd, na.rm = TRUE),
max_salary = max(salary_in_usd, na.rm = TRUE),
count = n()
) %>%
arrange(desc(mean_salary))
print(top_job)
#top 10
top_10_jobs <- top_job %>% slice_head(n = 10)
ggplot(top_10_jobs, aes(x = reorder(job_title, mean_salary), y = mean_salary, fill = job_title)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Top 10 Highest Paying Job Titles in 2024", x = "Job Title", y = "Average Salary (USD)") +
scale_y_continuous(labels = scales::comma) +
theme_minimal()
highest_paid_job <- salaries_2024 %>%
slice_max(salary_in_usd, n = 1)
print(highest_paid_job)
#Check experience_level value
unique(cleaned_salaries$experience_level)
# Compute average salary and salary in USD by experience level
experience_salary <- cleaned_salaries %>%
group_by(experience_level) %>%
summarise(
Avg_Salary_USD = mean(salary_in_usd, na.rm = TRUE),
Count = n()
)
# Display summary table
print(experience_salary)
library(scales)
# Visualize with Barplot
ggplot(cleaned_salaries, aes(x = experience_level, y = salary_in_usd, fill = experience_level)) +
geom_bar(stat = "identity") +
labs(title = "Average Salary by Experience Level", x = "Experience Level", y = "Average Salary (USD)")+
scale_y_continuous(labels = scales::comma)+
theme_minimal()
# Visualize with Boxplot
ggplot(cleaned_salaries, aes(x = experience_level, y = salary_in_usd, fill = experience_level)) +
geom_boxplot() +
labs(title = "Salary Distribution by Experience Level", x = "Experience Level", y = "Salary in USD") +
scale_y_continuous(labels = scales::comma)+
theme_minimal()
# ANOVA test
anova_result <- aov(salary_in_usd ~ experience_level, data = cleaned_salaries)
summary(anova_result)
#Check work_models value
unique(cleaned_salaries$work_models)
# Compute average salary by work model
work_model_salary <- cleaned_salaries %>%
group_by(work_models) %>%
summarise(
Avg_Salary_USD = mean(salary_in_usd, na.rm = TRUE),
Count = n()
)
print(work_model_salary)
# Boxplot of Salary by Work Model
ggplot(cleaned_salaries, aes(x = work_models, y = salary_in_usd, fill = work_models)) +
geom_boxplot() +
scale_y_continuous(labels = scales::comma) +
labs(title = "Salary Comparison: Remote vs. In-Person", x = "Work Model", y = "Salary in USD")+
theme_minimal()
# ANOVA test
anova_result <- aov(salary_in_usd ~ work_models, data = cleaned_salaries)
summary(anova_result)
#Check company_size value
unique(cleaned_salaries$company_size)
salary_summary <- cleaned_salaries %>%
group_by(company_size) %>%
summarise(
mean_salary = mean(salary_in_usd, na.rm = TRUE),
median_salary = median(salary_in_usd, na.rm = TRUE),
count = n()
)
print(salary_summary)
#Box plot for Salary distribution by company size
ggplot(cleaned_salaries, aes(x = company_size, y = salary_in_usd, fill = company_size)) +
geom_boxplot() +
labs(title = "Salary Distribution by Company Size", x = "Company Size", y = "Salary (USD)") +
scale_y_continuous(labels = comma)
theme_minimal()
# ANOVA test
anova_result <- aov(salary_in_usd ~ company_size, data = cleaned_salaries)
summary(anova_result)
#Check work_year value
unique(cleaned_salaries$work_year)
# Compute average salary by year
salary_trends <- cleaned_salaries %>%
group_by(work_year) %>%
summarise(
Avg_Salary_USD = mean(salary_in_usd, na.rm = TRUE),
Count = n()
)
print(salary_trends)
# Line plot for Salary Trends
ggplot(salary_trends, aes(x = work_year, y = Avg_Salary_USD)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "red", size = 2) +
scale_y_continuous(labels = scales::comma) +
labs(title = "Salary Trends in Data Science (2020-2024)", x = "Year", y = "Average Salary in USD") +
theme_minimal()
# Box plot
ggplot(cleaned_salaries, aes(x = as.factor(work_year), y = salary_in_usd, fill = as.factor(work_year))) +
geom_boxplot() +
scale_y_continuous(labels = scales::comma) +
labs(title = "Salary Distribution by Year",x = "Year",y = "Salary in USD") +
theme_minimal()
# ANOVA test
anova_result <- aov(salary_in_usd ~ as.factor(work_year), data = cleaned_salaries)
summary(anova_result)
salaries_2024 <- cleaned_salaries %>%
filter(work_year == 2024)
# average salaries by job title
top_job <- salaries_2024 %>%
group_by(job_title) %>%
summarise(
mean_salary = mean(salary_in_usd, na.rm = TRUE),
max_salary = max(salary_in_usd, na.rm = TRUE),
count = n()
) %>%
arrange(desc(mean_salary))
print(top_job)
#top 10
top_10_jobs <- top_job %>% slice_head(n = 10)
ggplot(top_10_jobs, aes(x = reorder(job_title, mean_salary), y = mean_salary, fill = job_title)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Top 10 Highest Paying Job Titles in 2024", x = "Job Title", y = "Average Salary (USD)") +
scale_y_continuous(labels = scales::comma) +
theme_minimal()
highest_paid_job <- salaries_2024 %>%
slice_max(salary_in_usd, n = 1)
print(highest_paid_job)
ggplot(cleaned_salaries, aes(x = work_year, y = salary_in_usd)) +
geom_line()
# Step 1: Calculate the frequencies of each job title
job_title_freq <- table(cleaned_salaries$job_title)
# Step 2: Create the histogram of job title frequencies
# Convert the frequency table into a data frame for plotting
job_title_freq_df <- as.data.frame(job_title_freq)
colnames(job_title_freq_df) <- c("job_title", "frequency")
# Plotting the histogram
library(ggplot2)
ggplot(job_title_freq_df, aes(x = reorder(job_title, -frequency), y = frequency)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +  # Bar plot for categorical data
labs(
title = "Job Title Frequencies",  # Plot title
x = "Job Title",  # X-axis label
y = "Frequency"   # Y-axis label
) +
theme_minimal() +  # Minimal theme
theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Rotate x-axis labels for readability
freq_table <- table(cleaned_salaries$job_title)
freq_df <- as.data.frame(freq_table, stringsAsFactors = FALSE)
colnames(freq_df) <- c("job_title", "frequency")
threshold <- 20
freq_df$job_title[freq_df$frequency <= threshold] <- "Other"
freq_df <- aggregate(frequency ~ job_title, data = freq_df, sum)
freq_df <- freq_df[order(-freq_df$frequency), ]
cleaned_salaries$job_title <- ifelse(
cleaned_salaries$job_title %in% freq_df$job_title,
cleaned_salaries$job_title,
"Other"
)
cleaned_salaries
freq_df
ggplot(freq_df, aes(x = reorder(job_title, -frequency), y = frequency)) +
geom_bar(stat = "identity", fill = "skyblue") +  # Bar plot
labs(
title = "Job Title Frequencies",  # Plot title
x = "Job Title",  # X-axis label
y = "Frequency"   # Y-axis label
) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Rotate x-axis labels
freq_df
cleaned_salaries
unique(cleaned_salaries$employment_type)
threshold <- 20
# Compute frequencies and group low-frequency jobs into "Other"
binned_data <- cleaned_salaries %>%
count(job_title, name = "frequency") %>%  # Calculate frequencies
mutate(
job_title = ifelse(frequency < threshold, "Other", job_title)
) %>%
group_by(job_title) %>%
summarise(frequency = sum(frequency)) %>%
arrange(desc(frequency))
ggplot(binned_data, aes(x = reorder(job_title, -frequency), y = frequency)) +
geom_bar(stat = "identity") +
scale_y_log10() +  # Log scale for better visibility
labs(title = "Job Title Frequencies", x = "Job Title", y = "Frequency (log10)") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
str(cleaned_salaries)
