cat_vars <- c("employment_type", "work_models", "company_size", "experience_level", "job_group")
for (col in cat_vars) {
train_df[[col]] <- as.factor(train_df[[col]])
test_df[[col]] <- factor(test_df[[col]], levels = levels(train_df[[col]]))
}
set.seed(42)
rf_model <- randomForest(
salary_in_usd ~ .,
data = train_df,
ntree = 500,
importance = TRUE
)
rf_pred <- predict(rf_model, newdata = test_df)
head(data.frame(Actual = test_df$salary_in_usd, Predicted = rf_pred), 10)
rmse_val <- RMSE(rf_pred, test_df$salary_in_usd)
r2_val <- R2(rf_pred, test_df$salary_in_usd)
mae_val <- MAE(rf_pred, test_df$salary_in_usd)
cat("ðŸ“ˆ Random Forest Model Performance\n")
cat("RMSE:", round(rmse_val, 2), "\n")
cat("RÂ²:", round(r2_val, 4), "\n")
cat("MAE:", round(mae_val, 2), "\n")
# Visualizing variable importance
varImpPlot(rf_model, main = "Variable Importance (Random Forest)")
#install.packages("e1071")
library(e1071)
library(caret)
set.seed(42)
svm_model <- svm(
salary_in_usd ~ .,
data = train_df,
kernel = "radial",
cost = 10,
epsilon = 0.1
)
svm_pred <- predict(svm_model, newdata = test_df)
head(data.frame(Actual = test_df$salary_in_usd, Predicted = svm_pred), 10)
svm_rmse <- RMSE(svm_pred, test_df$salary_in_usd)
svm_r2   <- R2(svm_pred, test_df$salary_in_usd)
svm_mae  <- MAE(svm_pred, test_df$salary_in_usd)
cat("SVM regression performance\n")
cat("RMSE:", round(svm_rmse, 2), "\n")
cat("RÂ²:", round(svm_r2, 4), "\n")
cat("MAE:", round(svm_mae, 2), "\n")
install.packages("nnet")
library(nnet)
library(caret)
Q1 <- quantile(us_residents_df$salary_in_usd, 0.25)
Q3 <- quantile(us_residents_df$salary_in_usd, 0.75)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
cleaned_salaries <- us_residents_df[us_residents_df$salary_in_usd >= lower_bound &
us_residents_df$salary_in_usd <= upper_bound, ]
cat_vars <- c("job_title", "employment_type", "work_models", "company_size", "experience_level")
cleaned_salaries[cat_vars] <- lapply(cleaned_salaries[cat_vars], as.factor)
set.seed(123)
train_index <- sample(seq_len(nrow(cleaned_salaries)), size = 0.8 * nrow(cleaned_salaries))
train_df <- cleaned_salaries[train_index, ]
test_df <- cleaned_salaries[-train_index, ]
for (col in cat_vars) {
test_df[[col]] <- factor(test_df[[col]], levels = levels(train_df[[col]]))
}
str(train_df)
str(test_df)
#install.packages("randomForest")
#install.packages("caret")
library(randomForest)
library(caret)
sapply(train_df, function(x) if (is.factor(x)) length(levels(x)))
library(dplyr)
cleaned_salaries$job_group <- case_when(
grepl("Scientist", cleaned_salaries$job_title, ignore.case = TRUE) ~ "Data Scientist",
grepl("Engineer", cleaned_salaries$job_title, ignore.case = TRUE) ~ "Engineer",
grepl("Analyst", cleaned_salaries$job_title, ignore.case = TRUE) ~ "Analyst",
grepl("Manager", cleaned_salaries$job_title, ignore.case = TRUE) ~ "Manager",
grepl("Architect", cleaned_salaries$job_title, ignore.case = TRUE) ~ "Architect",
grepl("ML|AI|Machine Learning", cleaned_salaries$job_title, ignore.case = TRUE) ~ "ML/AI",
TRUE ~ "Other"
)
table(cleaned_salaries$job_group)
# Remove existing variable and use job_group
cleaned_salaries$job_group <- as.factor(cleaned_salaries$job_group)
cleaned_salaries$job_title <- NULL
set.seed(123)
train_index <- sample(seq_len(nrow(cleaned_salaries)), size = 0.8 * nrow(cleaned_salaries))
train_df <- cleaned_salaries[train_index, ]
test_df <- cleaned_salaries[-train_index, ]
# Ensure consistency in factor levels between training and test sets
cat_vars <- c("employment_type", "work_models", "company_size", "experience_level", "job_group")
for (col in cat_vars) {
train_df[[col]] <- as.factor(train_df[[col]])
test_df[[col]] <- factor(test_df[[col]], levels = levels(train_df[[col]]))
}
set.seed(42)
rf_model <- randomForest(
salary_in_usd ~ .,
data = train_df,
ntree = 500,
importance = TRUE
)
rf_pred <- predict(rf_model, newdata = test_df)
head(data.frame(Actual = test_df$salary_in_usd, Predicted = rf_pred), 10)
rmse_val <- RMSE(rf_pred, test_df$salary_in_usd)
r2_val <- R2(rf_pred, test_df$salary_in_usd)
mae_val <- MAE(rf_pred, test_df$salary_in_usd)
cat("ðŸ“ˆ Random Forest Model Performance\n")
cat("RMSE:", round(rmse_val, 2), "\n")
cat("RÂ²:", round(r2_val, 4), "\n")
cat("MAE:", round(mae_val, 2), "\n")
# Visualizing variable importance
varImpPlot(rf_model, main = "Variable Importance (Random Forest)")
#install.packages("e1071")
library(e1071)
library(caret)
set.seed(42)
svm_model <- svm(
salary_in_usd ~ .,
data = train_df,
kernel = "radial",
cost = 10,
epsilon = 0.1
)
svm_pred <- predict(svm_model, newdata = test_df)
head(data.frame(Actual = test_df$salary_in_usd, Predicted = svm_pred), 10)
svm_rmse <- RMSE(svm_pred, test_df$salary_in_usd)
svm_r2   <- R2(svm_pred, test_df$salary_in_usd)
svm_mae  <- MAE(svm_pred, test_df$salary_in_usd)
cat("SVM regression performance\n")
cat("RMSE:", round(svm_rmse, 2), "\n")
cat("RÂ²:", round(svm_r2, 4), "\n")
cat("MAE:", round(svm_mae, 2), "\n")
install.packages("nnet")
library(nnet)
library(caret)
install.packages("nnet")
library(nnet)
library(caret)
#install.packages("nnet")
library(nnet)
library(caret)
set.seed(42)
mlp_model <- nnet(
salary_in_usd ~ .,
data = train_df,
size = 5,
linout = TRUE,
decay = 0.01,
maxit = 500
)
mlp_pred <- predict(mlp_model, newdata = test_df)
head(data.frame(Actual = test_df$salary_in_usd, Predicted = mlp_pred), 10)
mlp_rmse <- RMSE(mlp_pred, test_df$salary_in_usd)
mlp_r2   <- R2(mlp_pred, test_df$salary_in_usd)
mlp_mae  <- MAE(mlp_pred, test_df$salary_in_usd)
cat("MLP regression performance\n")
cat("RMSE:", round(mlp_rmse, 2), "\n")
cat("RÂ²:", round(mlp_r2, 4), "\n")
cat("MAE:", round(mlp_mae, 2), "\n")
table(test_df$salary_in_usd)
sd(test_df$salary_in_usd)
set.seed(42)
mlp_model <- nnet(
salary_in_usd ~ .,
data = train_df,
size = 10,
linout = TRUE,
decay = 0.001,
maxit = 1000
)
mlp_pred <- predict(mlp_model, newdata = test_df)
head(data.frame(Actual = test_df$salary_in_usd, Predicted = mlp_pred), 10)
set.seed(42)
mlp_model <- nnet(
salary_in_usd ~ .,
data = train_df,
size = 10,
linout = TRUE,
decay = 0.001,
maxit = 1000
)
mlp_pred <- predict(mlp_model, newdata = test_df)
head(data.frame(Actual = test_df$salary_in_usd, Predicted = mlp_pred), 10)
mlp_rmse <- RMSE(mlp_pred, test_df$salary_in_usd)
mlp_r2   <- R2(mlp_pred, test_df$salary_in_usd)
mlp_mae  <- MAE(mlp_pred, test_df$salary_in_usd)
cat("MLP regression performance\n")
cat("RMSE:", round(mlp_rmse, 2), "\n")
cat("RÂ²:", round(mlp_r2, 4), "\n")
cat("MAE:", round(mlp_mae, 2), "\n")
pre_proc <- preProcess(train_df, method = c("center", "scale"))
train_df_scaled <- predict(pre_proc, train_df)
test_df_scaled <- predict(pre_proc, test_df)
set.seed(42)
mlp_model <- nnet(
salary_in_usd ~ .,
data = train_df_scaled,
size = 10,
linout = TRUE,
decay = 0.001,
maxit = 1000
)
mlp_pred <- predict(mlp_model, newdata = test_df)
head(data.frame(Actual = test_df$salary_in_usd, Predicted = mlp_pred), 10)
mlp_rmse <- RMSE(mlp_pred, test_df$salary_in_usd)
mlp_r2   <- R2(mlp_pred, test_df$salary_in_usd)
mlp_mae  <- MAE(mlp_pred, test_df$salary_in_usd)
cat("MLP regression performance\n")
cat("RMSE:", round(mlp_rmse, 2), "\n")
cat("RÂ²:", round(mlp_r2, 4), "\n")
cat("MAE:", round(mlp_mae, 2), "\n")
features_only <- train_df[, setdiff(names(train_df), "salary_in_usd")]
pre_proc <- preProcess(features_only, method = c("center", "scale"))
train_df_scaled <- predict(pre_proc, train_df)
train_scaled$salary_in_usd <- train_df$salary_in_usd
features_only <- train_df[, setdiff(names(train_df), "salary_in_usd")]
pre_proc <- preProcess(features_only, method = c("center", "scale"))
train_df_scaled <- predict(pre_proc, train_df)
train_df_scaled$salary_in_usd <- train_df$salary_in_usd
test_df_scaled <- predict(pre_proc, test_df)
test_df_scaled$salary_in_usd <- test_df$salary_in_usd
set.seed(42)
mlp_model <- nnet(
salary_in_usd ~ .,
data = train_df_scaled,
size = 10,
linout = TRUE,
decay = 0.001,
maxit = 1000
)
mlp_pred <- predict(mlp_model, newdata = test_df)
head(data.frame(Actual = test_df$salary_in_usd, Predicted = mlp_pred), 10)
mlp_rmse <- RMSE(mlp_pred, test_df$salary_in_usd)
mlp_r2   <- R2(mlp_pred, test_df$salary_in_usd)
mlp_mae  <- MAE(mlp_pred, test_df$salary_in_usd)
cat("MLP regression performance\n")
cat("RMSE:", round(mlp_rmse, 2), "\n")
cat("RÂ²:", round(mlp_r2, 4), "\n")
cat("MAE:", round(mlp_mae, 2), "\n")
salary_min <- min(train_df$salary_in_usd)
salary_max <- max(train_df$salary_in_usd)
train_df$salary_scaled <- (train_df$salary_in_usd - salary_min) / (salary_max - salary_min)
set.seed(42)
mlp_model <- nnet(
salary_scaled ~ . -salary_in_usd,
data = train_df,
size = 10,
linout = TRUE,
decay = 0.001,
maxit = 1000
)
mlp_pred_scaled <- predict(mlp_model, newdata = test_df)
# Restore the predicted value back to the original annual salary unit.
mlp_pred_rescaled <- mlp_pred_scaled * (salary_max - salary_min) + salary_min
mlp_rmse <- RMSE(mlp_pred_rescaled, test_df$salary_in_usd)
mlp_r2   <- R2(mlp_pred_rescaled, test_df$salary_in_usd)
mlp_mae  <- MAE(mlp_pred_rescaled, test_df$salary_in_usd)
cat("MLP (Restore after Target Normalization) Performance")
cat("RMSE:", round(mlp_rmse, 2), "\n")
cat("RÂ²:", round(mlp_r2, 4), "\n")
cat("MAE:", round(mlp_mae, 2), "\n")
features_only <- train_df[, setdiff(names(train_df), "salary_in_usd")]
pre_proc <- preProcess(features_only, method = c("center", "scale"))
train_df_scaled <- predict(pre_proc, train_df)
train_df_scaled$salary_in_usd <- train_df$salary_in_usd
test_df_scaled <- predict(pre_proc, test_df)
names(train_df)
feature_names <- setdiff(names(train_df), "salary_in_usd")
print(feature_names)
features_only <- train_df[, feature_names]
pre_proc <- preProcess(features_only, method = c("center", "scale"))
train_df_scaled <- predict(pre_proc, train_df)
train_df_scaled$salary_in_usd <- train_df$salary_in_usd
test_df_scaled <- predict(pre_proc, test_df)
Q1 <- quantile(us_residents_df$salary_in_usd, 0.25)
Q3 <- quantile(us_residents_df$salary_in_usd, 0.75)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
cleaned_salaries <- us_residents_df[us_residents_df$salary_in_usd >= lower_bound &
us_residents_df$salary_in_usd <= upper_bound, ]
cat_vars <- c("job_title", "employment_type", "work_models", "company_size", "experience_level")
cleaned_salaries[cat_vars] <- lapply(cleaned_salaries[cat_vars], as.factor)
set.seed(123)
train_index <- sample(seq_len(nrow(cleaned_salaries)), size = 0.8 * nrow(cleaned_salaries))
train_df <- cleaned_salaries[train_index, ]
test_df <- cleaned_salaries[-train_index, ]
for (col in cat_vars) {
test_df[[col]] <- factor(test_df[[col]], levels = levels(train_df[[col]]))
}
str(train_df)
str(test_df)
#install.packages("randomForest")
#install.packages("caret")
library(randomForest)
library(caret)
sapply(train_df, function(x) if (is.factor(x)) length(levels(x)))
library(dplyr)
cleaned_salaries$job_group <- case_when(
grepl("Scientist", cleaned_salaries$job_title, ignore.case = TRUE) ~ "Data Scientist",
grepl("Engineer", cleaned_salaries$job_title, ignore.case = TRUE) ~ "Engineer",
grepl("Analyst", cleaned_salaries$job_title, ignore.case = TRUE) ~ "Analyst",
grepl("Manager", cleaned_salaries$job_title, ignore.case = TRUE) ~ "Manager",
grepl("Architect", cleaned_salaries$job_title, ignore.case = TRUE) ~ "Architect",
grepl("ML|AI|Machine Learning", cleaned_salaries$job_title, ignore.case = TRUE) ~ "ML/AI",
TRUE ~ "Other"
)
table(cleaned_salaries$job_group)
# Remove existing variable and use job_group
cleaned_salaries$job_group <- as.factor(cleaned_salaries$job_group)
cleaned_salaries$job_title <- NULL
set.seed(123)
train_index <- sample(seq_len(nrow(cleaned_salaries)), size = 0.8 * nrow(cleaned_salaries))
train_df <- cleaned_salaries[train_index, ]
test_df <- cleaned_salaries[-train_index, ]
# Ensure consistency in factor levels between training and test sets
cat_vars <- c("employment_type", "work_models", "company_size", "experience_level", "job_group")
for (col in cat_vars) {
train_df[[col]] <- as.factor(train_df[[col]])
test_df[[col]] <- factor(test_df[[col]], levels = levels(train_df[[col]]))
}
set.seed(42)
rf_model <- randomForest(
salary_in_usd ~ .,
data = train_df,
ntree = 500,
importance = TRUE
)
rf_pred <- predict(rf_model, newdata = test_df)
head(data.frame(Actual = test_df$salary_in_usd, Predicted = rf_pred), 10)
rmse_val <- RMSE(rf_pred, test_df$salary_in_usd)
r2_val <- R2(rf_pred, test_df$salary_in_usd)
mae_val <- MAE(rf_pred, test_df$salary_in_usd)
cat("ðŸ“ˆ Random Forest Model Performance\n")
cat("RMSE:", round(rmse_val, 2), "\n")
cat("RÂ²:", round(r2_val, 4), "\n")
cat("MAE:", round(mae_val, 2), "\n")
# Visualizing variable importance
varImpPlot(rf_model, main = "Variable Importance (Random Forest)")
#install.packages("e1071")
library(e1071)
library(caret)
feature_names <- setdiff(names(train_df), "salary_in_usd")
print(feature_names)
features_only <- train_df[, feature_names]
pre_proc <- preProcess(features_only, method = c("center", "scale"))
train_df_scaled <- predict(pre_proc, train_df)
train_df_scaled$salary_in_usd <- train_df$salary_in_usd
test_df_scaled <- predict(pre_proc, test_df)
test_df_scaled$salary_in_usd <- test_df$salary_in_usd
features_only <- train_df[, setdiff(names(train_df), "salary_in_usd")]
pre_proc <- preProcess(features_only, method = c("center", "scale"))
train_scaled <- predict(pre_proc, train_df)
train_scaled$salary_in_usd <- train_df$salary_in_usd
test_scaled <- predict(pre_proc, test_df)
test_scaled$salary_in_usd <- test_df$salary_in_usd
set.seed(42)
svm_model <- svm(
salary_in_usd ~ .,
data = train_scaled,
kernel = "radial",
cost = 10,
epsilon = 0.1
)
svm_pred <- predict(svm_model, newdata = test_scaled)
head(data.frame(Actual = test_df$salary_in_usd, Predicted = svm_pred), 10)
svm_rmse <- RMSE(svm_pred, test_scaled$salary_in_usd)
svm_r2   <- R2(svm_pred, test_scaled$salary_in_usd)
svm_mae  <- MAE(svm_pred, test_scaled$salary_in_usd)
cat("SVM regression performance\n")
cat("RMSE:", round(svm_rmse, 2), "\n")
cat("RÂ²:", round(svm_r2, 4), "\n")
cat("MAE:", round(svm_mae, 2), "\n")
set.seed(42)
svm_model <- svm(
salary_in_usd ~ .,
data = train_scaled,
kernel = "radial",
cost = 10,
epsilon = 0.1
)
svm_pred <- predict(svm_model, newdata = test_scaled)
head(data.frame(Actual = test_df$salary_in_usd, Predicted = svm_pred), 10)
library(ggplot2)
ggplot(data.frame(Actual = test_scaled$salary_in_usd, Predicted = svm_pred),
aes(x = Actual, y = Predicted)) +
geom_point(alpha = 0.5) +
geom_abline(slope = 1, intercept = 0, color = "red") +
labs(title = "SVM Prediction vs Actual Salary",
x = "Actual Salary", y = "Predicted Salary")
#install.packages("randomForest")
#install.packages("caret")
library(randomForest)
library(caret)
sapply(train_df, function(x) if (is.factor(x)) length(levels(x)))
library(dplyr)
cleaned_salaries$job_group <- case_when(
grepl("Scientist", cleaned_salaries$job_title, ignore.case = TRUE) ~ "Data Scientist",
grepl("Engineer", cleaned_salaries$job_title, ignore.case = TRUE) ~ "Engineer",
grepl("Analyst", cleaned_salaries$job_title, ignore.case = TRUE) ~ "Analyst",
grepl("Manager", cleaned_salaries$job_title, ignore.case = TRUE) ~ "Manager",
grepl("Architect", cleaned_salaries$job_title, ignore.case = TRUE) ~ "Architect",
grepl("ML|AI|Machine Learning", cleaned_salaries$job_title, ignore.case = TRUE) ~ "ML/AI",
TRUE ~ "Other"
)
library(dplyr)
cleaned_salaries$job_group <- case_when(
grepl("Scientist", cleaned_salaries$job_title, ignore.case = TRUE) ~ "Data Scientist",
grepl("Engineer", cleaned_salaries$job_title, ignore.case = TRUE) ~ "Engineer",
grepl("Analyst", cleaned_salaries$job_title, ignore.case = TRUE) ~ "Analyst",
grepl("Manager", cleaned_salaries$job_title, ignore.case = TRUE) ~ "Manager",
grepl("Architect", cleaned_salaries$job_title, ignore.case = TRUE) ~ "Architect",
grepl("ML|AI|Machine Learning", cleaned_salaries$job_title, ignore.case = TRUE) ~ "ML/AI",
TRUE ~ "Other"
)
Q1 <- quantile(us_residents_df$salary_in_usd, 0.25)
Q3 <- quantile(us_residents_df$salary_in_usd, 0.75)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
cleaned_salaries <- us_residents_df[us_residents_df$salary_in_usd >= lower_bound &
us_residents_df$salary_in_usd <= upper_bound, ]
cat_vars <- c("job_title", "employment_type", "work_models", "company_size", "experience_level")
cleaned_salaries[cat_vars] <- lapply(cleaned_salaries[cat_vars], as.factor)
set.seed(123)
train_index <- sample(seq_len(nrow(cleaned_salaries)), size = 0.8 * nrow(cleaned_salaries))
train_df <- cleaned_salaries[train_index, ]
test_df <- cleaned_salaries[-train_index, ]
for (col in cat_vars) {
test_df[[col]] <- factor(test_df[[col]], levels = levels(train_df[[col]]))
}
str(train_df)
str(test_df)
#install.packages("randomForest")
#install.packages("caret")
library(randomForest)
library(caret)
sapply(train_df, function(x) if (is.factor(x)) length(levels(x)))
library(dplyr)
cleaned_salaries$job_group <- case_when(
grepl("Scientist", cleaned_salaries$job_title, ignore.case = TRUE) ~ "Data Scientist",
grepl("Engineer", cleaned_salaries$job_title, ignore.case = TRUE) ~ "Engineer",
grepl("Analyst", cleaned_salaries$job_title, ignore.case = TRUE) ~ "Analyst",
grepl("Manager", cleaned_salaries$job_title, ignore.case = TRUE) ~ "Manager",
grepl("Architect", cleaned_salaries$job_title, ignore.case = TRUE) ~ "Architect",
grepl("ML|AI|Machine Learning", cleaned_salaries$job_title, ignore.case = TRUE) ~ "ML/AI",
TRUE ~ "Other"
)
table(cleaned_salaries$job_group)
# Remove existing variable and use job_group
cleaned_salaries$job_group <- as.factor(cleaned_salaries$job_group)
cleaned_salaries$job_title <- NULL
set.seed(123)
train_index <- sample(seq_len(nrow(cleaned_salaries)), size = 0.8 * nrow(cleaned_salaries))
train_df <- cleaned_salaries[train_index, ]
test_df <- cleaned_salaries[-train_index, ]
# Ensure consistency in factor levels between training and test sets
cat_vars <- c("employment_type", "work_models", "company_size", "experience_level", "job_group")
for (col in cat_vars) {
train_df[[col]] <- as.factor(train_df[[col]])
test_df[[col]] <- factor(test_df[[col]], levels = levels(train_df[[col]]))
}
set.seed(42)
rf_model <- randomForest(
salary_in_usd ~ .,
data = train_df,
ntree = 500,
importance = TRUE
)
rf_pred <- predict(rf_model, newdata = test_df)
head(data.frame(Actual = test_df$salary_in_usd, Predicted = rf_pred), 10)
rmse_val <- RMSE(rf_pred, test_df$salary_in_usd)
r2_val <- R2(rf_pred, test_df$salary_in_usd)
mae_val <- MAE(rf_pred, test_df$salary_in_usd)
cat("ðŸ“ˆ Random Forest Model Performance\n")
cat("RMSE:", round(rmse_val, 2), "\n")
cat("RÂ²:", round(r2_val, 4), "\n")
cat("MAE:", round(mae_val, 2), "\n")
# Visualizing variable importance
varImpPlot(rf_model, main = "Variable Importance (Random Forest)")
#install.packages("e1071")
library(e1071)
library(caret)
features_only <- train_df[, setdiff(names(train_df), "salary_in_usd")]
pre_proc <- preProcess(features_only, method = c("center", "scale"))
train_scaled <- predict(pre_proc, train_df)
train_scaled$salary_in_usd <- train_df$salary_in_usd
test_scaled <- predict(pre_proc, test_df)
test_scaled$salary_in_usd <- test_df$salary_in_usd
set.seed(42)
svm_model <- svm(
salary_in_usd ~ .,
data = train_scaled,
kernel = "radial",
cost = 10,
epsilon = 0.1
)
svm_pred <- predict(svm_model, newdata = test_scaled)
head(data.frame(Actual = test_df$salary_in_usd, Predicted = svm_pred), 10)
library(ggplot2)
ggplot(data.frame(Actual = test_scaled$salary_in_usd, Predicted = svm_pred),
aes(x = Actual, y = Predicted)) +
geom_point(alpha = 0.5) +
geom_abline(slope = 1, intercept = 0, color = "red") +
labs(title = "SVM Prediction vs Actual Salary",
x = "Actual Salary", y = "Predicted Salary")
svm_rmse <- RMSE(svm_pred, test_scaled$salary_in_usd)
svm_r2   <- R2(svm_pred, test_scaled$salary_in_usd)
svm_mae  <- MAE(svm_pred, test_scaled$salary_in_usd)
cat("SVM regression performance\n")
cat("RMSE:", round(svm_rmse, 2), "\n")
cat("RÂ²:", round(svm_r2, 4), "\n")
cat("MAE:", round(svm_mae, 2), "\n")
