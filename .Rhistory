table_data <- table(cleaned_salaries$employment_type, cleaned_salaries$work_models)
cat("Chi-Squared Test for Employment Type and Work Models")
chisq_test <- chisq.test(table_data)
print(chisq_test)
chisq_test$expected
table_data <- table(cleaned_salaries$employment_type, cleaned_salaries$work_models)
chisq_test <- chisq.test(table_data)
cat("\n\n")
cat("Chi-Squared Test for Employment Type and Work Models")
print(chisq_test)
chisq_test$expected
analytics_engineer <- cleaned_salaries[cleaned_salaries$job_title == "Analytics Engineer", ]
shapiro.test(analytics_engineer$salary_in_usd)
analytics_engineer <- cleaned_salaries[cleaned_salaries$job_title == "Analytics Engineer", ]
shapiro.test(analytics_engineer$salary_in_usd)
```
```{r include=TRUE, echo=TRUE, results='markup'}
data_manager <- cleaned_salaries[cleaned_salaries$job_title == "Data Manager", ]
shapiro.test(data_manager$salary_in_usd)
research_analyst <- cleaned_salaries[cleaned_salaries$job_title == "Research Analyst", ]
shapiro.test(research_analyst$salary_in_usd)
data_engineer <- cleaned_salaries[cleaned_salaries$job_title == "Data Engineer", ]
shapiro.test(data_engineer$salary_in_usd)
data_scientist <- cleaned_salaries[cleaned_salaries$job_title == "Data Scientist", ]
shapiro.test(data_scientist$salary_in_usd)
data_analyst <- cleaned_salaries[cleaned_salaries$job_title == "Data Analyst", ]
shapiro.test(data_analyst$salary_in_usd)
analytics_engineer <- cleaned_salaries[cleaned_salaries$job_title == "Analytics Engineer", ]
data_manager <- cleaned_salaries[cleaned_salaries$job_title == "Data Manager", ]
shapiro.test(data_manager$salary_in_usd)
research_analyst <- cleaned_salaries[cleaned_salaries$job_title == "Research Analyst", ]
shapiro.test(research_analyst$salary_in_usd)
data_engineer <- cleaned_salaries[cleaned_salaries$job_title == "Data Engineer", ]
shapiro.test(data_engineer$salary_in_usd)
data_scientist <- cleaned_salaries[cleaned_salaries$job_title == "Data Scientist", ]
shapiro.test(data_scientist$salary_in_usd)
data_analyst <- cleaned_salaries[cleaned_salaries$job_title == "Data Analyst", ]
shapiro.test(data_analyst$salary_in_usd)
analytics_engineer <- cleaned_salaries[cleaned_salaries$job_title == "Analytics Engineer", ]
shapiro.test(analytics_engineer$salary_in_usd)
ggplot(data_manager, aes(x = salary_in_usd)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "steelblue", color = "black", alpha = 0.7) +
geom_density(color = "red", size = 1) +
theme_minimal() +
labs(title = "Salary Distribution of Data Managers", x = "Salary in USD", y = "Density")
ggplot(data_manager, aes(x = salary_in_usd)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "steelblue", color = "black", alpha = 0.7) +
geom_density(color = "red", size = 1) +
theme_minimal() +
labs(title = "Salary Distribution of Data Managers", x = "Salary in USD", y = "Density")
ggplot(data_manager, aes(x = salary_in_usd)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "steelblue", color = "black", alpha = 0.7) +
geom_density(color = "red", size = 1) +
theme_minimal() +
labs(title = "Salary Distribution of Data Managers", x = "Salary in USD", y = "Density")
ggplot(data_manager, aes(x = salary_in_usd)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "steelblue", color = "black", alpha = 0.7) +
geom_density(color = "red", size = 1) +
theme_minimal() +
labs(title = "Salary Distribution of Data Managers", x = "Salary in USD", y = "Density")
ggplot(cleaned_salaries$data_manager, aes(x = salary_in_usd)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "steelblue", color = "black", alpha = 0.7) +
geom_density(color = "red", size = 1) +
theme_minimal() +
labs(title = "Salary Distribution of Data Managers", x = "Salary in USD", y = "Density")
ggplot(data_manager, aes(x = salary_in_usd)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "steelblue", color = "black", alpha = 0.7) +
geom_density(color = "red", size = 1) +
theme_minimal() +
labs(title = "Salary Distribution of Data Managers", x = "Salary in USD", y = "Density")
qqnorm(data_manager$salary_in_usd, main = "Q-Q Plot for Data Manager Salaries")
qqline(data_manager$salary_in_usd, col = "red", lwd = 2)
data_manager
qqnorm(data_manager$salary_in_usd, main = "Q-Q Plot for Data Manager Salaries")
qqline(data_manager$salary_in_usd, col = "red", lwd = 2)
qqnorm(data_manager$salary_in_usd, main = "Q-Q Plot for Data Manager Salaries")
qqline(data_manager$salary_in_usd, col = "red", lwd = 2)
qqnorm(research_analyst$salary_in_usd, main = "Q-Q Plot for Research Analyst Salaries")
qqline(research_analyst$salary_in_usd, col = "red", lwd = 2)
qqnorm(data_manager$salary_in_usd, main = "Q-Q Plot for Data Manager Salaries")
qqline(data_manager$salary_in_usd, col = "red", lwd = 2)
qqnorm(analytics_engineer$salary_in_usd, main = "Q-Q Plot for Analytics Engineer Salaries")
qqline(analytics_engineer$salary_in_usd, col = "red", lwd = 2)
t_test_result <- t.test(data_manager$salary_in_usd, analytics_engineer$salary_in_usd)
# Print the t-test result
print(t_test_result)
heatmap(cleaned_salaries)
str(salaries)
# Select only numeric columns from cleaned_salaries
numeric_data <- cleaned_salaries[sapply(cleaned_salaries, is.numeric)]
# Convert to matrix
numeric_matrix <- as.matrix(numeric_data)
# Create heatmap
heatmap(numeric_matrix, col = heat.colors(10), scale = "column")
install.packages("ggplot2")
install.packages("reshape2")
library(ggplot2)
library(reshape2)
# Select numeric columns
numeric_data <- cleaned_salaries[sapply(cleaned_salaries, is.numeric)]
# Calculate correlation matrix
correlation_matrix <- cor(numeric_data, use = "complete.obs")
# Reshape the matrix for ggplot2
correlation_data <- melt(correlation_matrix)
ggplot(correlation_data, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) +
theme_minimal() +
labs(title = "Correlation Plot", x = "", y = "") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_text(aes(label = round(value, 2)), color = "black")
install.packages("ggplot2")
table_data <- table(cleaned_salaries$employment_type, cleaned_salaries$work_models)
chisq_test <- chisq.test(table_data)
cat("\n\n")
cat("Chi-Squared Test for Employment Type and Work Models")
print(chisq_test)
chisq_test$expected
chisq_test$expected
print(chisq_test)
table_data <- table(cleaned_salaries$company_size, cleaned_salaries$work_models)
chisq_test <- chisq.test(table_data)
print(chisq_test)
table_data <- table(cleaned_salaries$work_models, cleaned_salaries$experience_level)
chisq_test <- chisq.test(table_data)
print(chisq_test)
table_data <- table(cleaned_salaries$experience_level, cleaned_salaries$employment_type)
chisq_test <- chisq.test(table_data)
print(chisq_test)
chisq_test$expected
print(chisq_test)
table_data <- table(cleaned_salaries$company_size, cleaned_salaries$work_models)
chisq_test <- chisq.test(table_data)
cat("\n\n")
cat("Chi-Squared Test for Company Size and Work Models")
print(chisq_test)
chisq_test$expected
table_data <- table(cleaned_salaries$work_models, cleaned_salaries$experience_level)
chisq_test <- chisq.test(table_data)
cat("\n\n")
cat("Chi-Squared Test for Experience Level and Work Models")
print(chisq_test)
chisq_test$expected
table_data <- table(cleaned_salaries$experience_level, cleaned_salaries$employment_type)
chisq_test <- chisq.test(table_data)
cat("\n\n")
cat("Chi-Squared Test for Experience Level and Employment Type")
print(chisq_test)
chisq_test$expected
# Calculate mean salary for Data Manager and Analytics Engineer
mean_salaries <- cleaned_salaries %>%
filter(job_title %in% c("Data Manager", "Analytics Engineer")) %>%
group_by(job_title) %>%
summarise(mean_salary = mean(salary_in_usd, na.rm = TRUE))
library(dplyr)
# Calculate mean salary for Data Manager and Analytics Engineer
mean_salaries <- cleaned_salaries %>%
filter(job_title %in% c("Data Manager", "Analytics Engineer")) %>%
group_by(job_title) %>%
summarise(mean_salary = mean(salary_in_usd, na.rm = TRUE))
# Create bar graph
ggplot(mean_salaries, aes(x = job_title, y = mean_salary, fill = job_title)) +
geom_bar(stat = "identity", color = "black", show.legend = FALSE) +
geom_text(aes(label = round(mean_salary, 2)), vjust = -0.5, size = 5) +  # Display mean salary above bars
labs(title = "Mean Salary for Data Manager and Analytics Engineer",
x = "Job Title",
y = "Mean Salary in USD") +
theme_minimal()
library(dplyr)
# Calculate mean salary for Data Manager and Analytics Engineer
mean_salaries <- cleaned_salaries %>%
filter(job_title %in% c("Data Manager", "Analytics Engineer")) %>%
group_by(job_title) %>%
summarise(mean_salary = mean(salary_in_usd, na.rm = TRUE))
# Adjusting margins to give more space for the text
par(mar = c(6, 4, 4, 2))  # Adjust the bottom, left, top, and right margins
# Redraw the plot
ggplot(mean_salaries, aes(x = job_title, y = mean_salary, fill = job_title)) +
geom_bar(stat = "identity", color = "black", show.legend = FALSE) +
geom_text(aes(label = round(mean_salary, 2)), vjust = -0.5, size = 5) +
labs(title = "Mean Salary for Data Manager and Analytics Engineer",
x = "Job Title",
y = "Mean Salary in USD") +
theme_minimal()
library(dplyr)
# Calculate mean salary for Data Manager and Analytics Engineer
mean_salaries <- cleaned_salaries %>%
filter(job_title %in% c("Data Manager", "Analytics Engineer")) %>%
group_by(job_title) %>%
summarise(mean_salary = mean(salary_in_usd, na.rm = TRUE))
# Adjusting margins to give more space for the text
par(mar = c(6, 4, 0, 2))  # Adjust the bottom, left, top, and right margins
# Redraw the plot
ggplot(mean_salaries, aes(x = job_title, y = mean_salary, fill = job_title)) +
geom_bar(stat = "identity", color = "black", show.legend = FALSE) +
geom_text(aes(label = round(mean_salary, 2)), vjust = -0.5, size = 5) +
labs(title = "Mean Salary for Data Manager and Analytics Engineer",
x = "Job Title",
y = "Mean Salary in USD") +
theme_minimal()
library(dplyr)
# Calculate mean salary for Data Manager and Analytics Engineer
mean_salaries <- cleaned_salaries %>%
filter(job_title %in% c("Data Manager", "Analytics Engineer")) %>%
group_by(job_title) %>%
summarise(mean_salary = mean(salary_in_usd, na.rm = TRUE))
# Adjusting margins to give more space for the text
par(mar = c(6, 4, 10, 2))  # Adjust the bottom, left, top, and right margins
# Redraw the plot
ggplot(mean_salaries, aes(x = job_title, y = mean_salary, fill = job_title)) +
geom_bar(stat = "identity", color = "black", show.legend = FALSE) +
geom_text(aes(label = round(mean_salary, 2)), vjust = -0.5, size = 5) +
labs(title = "Mean Salary for Data Manager and Analytics Engineer",
x = "Job Title",
y = "Mean Salary in USD") +
theme_minimal()
library(dplyr)
# Calculate mean salary for Data Manager and Analytics Engineer
mean_salaries <- cleaned_salaries %>%
filter(job_title %in% c("Data Manager", "Analytics Engineer")) %>%
group_by(job_title) %>%
summarise(mean_salary = mean(salary_in_usd, na.rm = TRUE))
# Create bar graph
ggplot(mean_salaries, aes(x = job_title, y = mean_salary, fill = job_title)) +
geom_bar(stat = "identity", color = "black", show.legend = FALSE) +
geom_text(aes(label = round(mean_salary, 2)), vjust = -0.5, size = 5) +  # Display mean salary above bars
labs(title = "Mean Salary for Data Manager and Analytics Engineer",
x = "Job Title",
y = "Mean Salary in USD") +
theme_minimal()
# Save the plot with a larger size
ggsave("mean_salary_plot.png",
plot = last_plot(),
width = 10,  # Increase the width
height = 6,  # Increase the height
dpi = 300)   # Adjust the resolution
library(dplyr)
# Calculate mean salary for Data Manager and Analytics Engineer
mean_salaries <- cleaned_salaries %>%
filter(job_title %in% c("Data Manager", "Analytics Engineer")) %>%
group_by(job_title) %>%
summarise(mean_salary = mean(salary_in_usd, na.rm = TRUE))
ggplot(mean_salaries, aes(x = job_title, y = mean_salary, fill = job_title)) +
geom_bar(stat = "identity", color = "black", show.legend = FALSE) +
geom_text(aes(label = round(mean_salary, 2)), vjust = -0.5, size = 6, color = "white") +  # White text color
labs(title = "Mean Salary for Data Manager and Analytics Engineer",
x = "Job Title",
y = "Mean Salary in USD") +
theme_minimal()
# Save the plot with a larger size
ggsave("mean_salary_plot.png",
plot = last_plot(),
width = 10,  # Increase the width
height = 6,  # Increase the height
dpi = 300)   # Adjust the resolution
library(dplyr)
# Calculate mean salary for Data Manager and Analytics Engineer
mean_salaries <- cleaned_salaries %>%
filter(job_title %in% c("Data Manager", "Analytics Engineer")) %>%
group_by(job_title) %>%
summarise(mean_salary = mean(salary_in_usd, na.rm = TRUE))
ggplot(mean_salaries, aes(x = job_title, y = mean_salary, fill = job_title)) +
geom_bar(stat = "identity", color = "white", show.legend = FALSE) +
geom_text(aes(label = round(mean_salary, 2)), vjust = -0.5, size = 6, color = "white") +  # White text color
labs(title = "Mean Salary for Data Manager and Analytics Engineer",
x = "Job Title",
y = "Mean Salary in USD") +
theme_minimal()
# Save the plot with a larger size
ggsave("mean_salary_plot.png",
plot = last_plot(),
width = 10,  # Increase the width
height = 6,  # Increase the height
dpi = 300)   # Adjust the resolution
library(dplyr)
# Calculate mean salary for Data Manager and Analytics Engineer
mean_salaries <- cleaned_salaries %>%
filter(job_title %in% c("Data Manager", "Analytics Engineer")) %>%
group_by(job_title) %>%
summarise(mean_salary = mean(salary_in_usd, na.rm = TRUE))
ggplot(mean_salaries, aes(x = job_title, y = mean_salary, fill = job_title)) +
geom_bar(stat = "identity", color = "white", show.legend = FALSE) +
geom_text(aes(label = round(mean_salary, 2)), vjust = -0.5, size = 6, color = "white") +  # White text color
labs(title = "Mean Salary for Data Manager and Analytics Engineer",
x = "Job Title",
y = "Mean Salary in USD") +
theme_minimal()
# Save the plot with a larger size
ggsave("mean_salary_plot.png",
plot = last_plot(),
width = 10,  # Increase the width
height = 6,  # Increase the height
dpi = 300)   # Adjust the resolution
library(dplyr)
# Calculate mean salary for Data Manager and Analytics Engineer
mean_salaries <- cleaned_salaries %>%
filter(job_title %in% c("Data Manager", "Analytics Engineer")) %>%
group_by(job_title) %>%
summarise(mean_salary = mean(salary_in_usd, na.rm = TRUE))
ggplot(mean_salaries, aes(x = job_title, y = mean_salary, fill = job_title)) +
geom_bar(stat = "identity", color = "black", show.legend = FALSE) +
geom_text(aes(label = round(mean_salary, 2)), vjust = -0.5, size = 6, color = "white") +  # White text color
labs(title = "Mean Salary for Data Manager and Analytics Engineer",
x = "Job Title",
y = "Mean Salary in USD") +
theme_minimal()
# Save the plot with a larger size
ggsave("mean_salary_plot.png",
plot = last_plot(),
width = 10,  # Increase the width
height = 6,  # Increase the height
dpi = 300)   # Adjust the resolution
library("scales")
salary_summary <- cleaned_salaries %>%
group_by(company_size) %>%
summarise(
mean_salary = mean(salary_in_usd, na.rm = TRUE),
median_salary = median(salary_in_usd, na.rm = TRUE),
count = n()
)
print(salary_summary)
#visualization
ggplot(cleaned_salaries, aes(x = company_size, y = salary_in_usd, fill = company_size)) +
geom_boxplot() +
labs(title = "Salary Distribution by Company Size", x = "Company Size", y = "Salary (USD)") +
scale_y_continuous(labels = comma)
theme_minimal()
#ANOVA Test
anova_result <- aov(salary_in_usd ~ company_size, data = cleaned_salaries)
summary(anova_result)
# Post-hoc analysis using Tukey's test
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)
library("scales")
salary_summary <- cleaned_salaries %>%
group_by(company_size) %>%
summarise(
mean_salary = mean(salary_in_usd, na.rm = TRUE),
median_salary = median(salary_in_usd, na.rm = TRUE),
count = n()
)
print(salary_summary)
#visualization
ggplot(cleaned_salaries, aes(x = company_size, y = salary_in_usd, fill = company_size)) +
geom_boxplot() +
labs(title = "Salary Distribution by Company Size", x = "Company Size", y = "Salary (USD)") +
scale_y_continuous(labels = comma)
theme_minimal()
#ANOVA Test
anova_result <- aov(salary_in_usd ~ company_size, data = cleaned_salaries)
summary(anova_result)
anova_result <- aov(salary_in_usd ~ work_models, data = cleaned_salaries)
summary(anova_result)
# Post-hoc analysis using Tukey's test
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)
library(dplyr)
# Filter the data
filtered_data <- cleaned_salaries %>%
filter(experience_level == "Entry level" & salary_in_usd == 200000)
# View the filtered data
print(filtered_data)
library(dplyr)
# Filter the data
filtered_data <- us_residents_df %>%
filter(experience_level == "Entry level" & salary_in_usd == 200000)
# View the filtered data
print(filtered_data)
library(dplyr)
# Filter the data
filtered_data <- salaries %>%
filter(experience_level == "Entry level" & salary_in_usd == 200000)
# View the filtered data
print(filtered_data)
library(dplyr)
# Filter the data
filtered_data <- salaries %>%
filter(experience_level == "Entry-level" & salary_in_usd == 200000)
# View the filtered data
print(filtered_data)
library(dplyr)
# Filter the data
filtered_data <- cleaned_salaries %>%
filter(experience_level == "Entry-level" & salary_in_usd == 200000)
# View the filtered data
print(filtered_data)
library(dplyr)
# Filter the data
filtered_data <- salaries %>%
filter(experience_level == "Entry-level" & salary_in_usd == 200000)
# View the filtered data
print(filtered_data)
library(dplyr)
# Filter the data
filtered_data <- us_residents_df %>%
filter(experience_level == "Entry-level" & salary_in_usd == 200000)
# View the filtered data
print(filtered_data)
# Step 1: Calculate the frequencies of each job title
job_title_freq <- table(cleaned_salaries$job_title)
# Step 2: Create the histogram of job title frequencies
# Convert the frequency table into a data frame for plotting
job_title_freq_df <- as.data.frame(job_title_freq)
# Plotting the histogram
library(ggplot2)
ggplot(freq_df, aes(x = reorder(job_title, -frequency), y = frequency)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +  # Bar plot for categorical data
labs(
title = "Job Title Frequencies",  # Plot title
x = "Job Title",  # X-axis label
y = "Frequency"   # Y-axis label
) +
theme_minimal() +  # Minimal theme
theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Rotate x-axis labels for readability`
# Check column names to verify correct variable name
colnames(cleaned_salaries)
# Convert work_models to a factor (important for t-test)
cleaned_salaries$work_models <- as.factor(cleaned_salaries$work_models)
# Compute average salary by work model
work_model_salary <- cleaned_salaries %>%
group_by(work_models) %>%
summarise(
Avg_Salary_USD = mean(salary_in_usd, na.rm = TRUE),
Count = n()
)
# Display results
print(work_model_salary)
# Perform t-test to check if salary difference is significant
if (length(unique(cleaned_salaries$work_models)) == 2) {  # Ensure exactly two categories exist
t_test_result <- t.test(salary_in_usd ~ work_models, data = cleaned_salaries, na.action = na.omit)
print(t_test_result)
} else {
print("T-test cannot be performed: work_models column does not have exactly two groups.")
}
# Boxplot of Salary by Work Model
ggplot(cleaned_salaries, aes(x = work_models, y = salary_in_usd, fill = work_models)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Salary Comparison: Remote vs. In-Person", x = "Work Model", y = "Salary in USD")
ggplot(cleaned_salaries, aes(y = salary_in_usd)) +
geom_boxplot(fill = "lightblue", outlier.color = "red") +
labs(title = "Boxplot of Salary in usd", y = "Salary")
# Get the indices of the rows with outliers in salary and salary_in_usd
outlier_rows_salary_usd <- which(us_residents_df$salary_in_usd %in% outliers_salary_usd$salary_in_usd)
# Remove outliers from the original dataset using subset
cleaned_salaries <- us_residents_df[-outlier_rows_salary_usd, ]
cleaned_salaries
# Boxplot for Salary in USD
ggplot(us_residents_df, aes(y = salary_in_usd)) +
geom_boxplot(fill = "lightblue", outlier.color = "red") +
labs(title = "Boxplot of Salary in USD", y = "Salary in USD")
# Compute average salary by year
salary_trends <- cleaned_salaries %>%
group_by(work_year) %>%
summarise(
Avg_Salary_USD = mean(salary_in_usd, na.rm = TRUE),
Count = n()
)
# Display results
print(salary_trends)
# Line plot for Salary Trends
ggplot(salary_trends, aes(x = work_year, y = Avg_Salary_USD)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "red", size = 2) +
theme_minimal() +
labs(title = "Salary Trends in Data Science (2020-2024)", x = "Year", y = "Average Salary in USD")
library(dplyr)
# Filter the data
filtered_data <- us_residents_df %>%
filter(experience_level == "Entry-level" & salary_in_usd > 200000)
# View the filtered data
print(filtered_data)
library(dplyr)
# Filter the data
filtered_data <- us_residents_df %>%
filter(experience_level == "Entry-level" & salary_in_usd > 200000)
max_salary <- max(cleaned_salaries$salary_in_usd)
print(max_salary)
# View the filtered data
print(filtered_data)
library(dplyr)
# Filter the data
filtered_data <- us_residents_df %>%
filter(experience_level == "Entry-level" & salary_in_usd > 200000)
max_salary <- max(cleaned_salaries$salary_in_usd)
print(max_salary)
max_salary_row <- cleaned_salaries %>%
filter(salary_in_usd == max_salary)
# View the filtered data
print(filtered_data)
library(dplyr)
# Filter the data
filtered_data <- us_residents_df %>%
filter(experience_level == "Entry-level" & salary_in_usd > 200000)
max_salary <- max(cleaned_salaries$salary_in_usd)
max_salary_row <- cleaned_salaries %>%
filter(salary_in_usd == max_salary)
print(max_salary_row)
# View the filtered data
print(filtered_data)
#load packages
library(dplyr)
library(ggplot2)
#load data
salaries = read.csv("data_science_salaries.csv")
#check for missing values
total_na <- sum(is.na(salaries))
missing_summary <- colSums(is.na(salaries))
cat("Total missing values:", total_na, "\n")
print(missing_summary)
# Display first few rows
head(salaries)
